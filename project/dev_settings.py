"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 2.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys
import datetime

import configparser

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '+t&ymj7z19x-jull=@gr)#b*j5)vs3-616m&5=@o+0@dk$0n(@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

sys.path.append(os.path.join(BASE_DIR, "apps"))
sys.path.append(os.path.join(BASE_DIR, "extra_apps"))

# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.staticfiles',

    'rest_framework',
    'channels',
    'django_rq',
    'django_crontab',

    "swagger",
    "websocket",
    "cms",
    "user",
]

MIDDLEWARE = [
    'project.middlewares.CSRFIgorneMiddleware',
    'project.middlewares.ExceptionHandlerMiddleware'
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'swagger/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'

ASGI_APPLICATION = "websocket.routing.application"

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

config = configparser.ConfigParser()
config.read('db.ini')
MYSQL_CONFIG = config["mysql"]
REDIS_CONFIG = config["redis"]

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': MYSQL_CONFIG['NAME'],
        'USER': MYSQL_CONFIG['USER'],
        'PASSWORD': MYSQL_CONFIG['PASSWORD'],
        'HOST': MYSQL_CONFIG['HOST'],
        'PORT': MYSQL_CONFIG['PORT'],
        'OPTIONS': {
            "init_command": "SET foreign_key_checks = 0;",
            "charset": MYSQL_CONFIG['CHARSET']
        }
    },
    'redis': {
        'HOST': REDIS_CONFIG['HOST'],
        'PORT': REDIS_CONFIG['PORT'],
        'PASSWORD': REDIS_CONFIG['PASSWORD'],
        'DB': REDIS_CONFIG['DB']
    }
}

REDIS_CONFIG_URI = "redis://:{}@{}:{}/{}".format(DATABASES['redis']['PASSWORD'],
                                                 DATABASES['redis']['HOST'],
                                                 DATABASES['redis']['PORT'],
                                                 DATABASES['redis']['DB'])

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [REDIS_CONFIG_URI],
        },
        'symmetric_encryption_keys': [
            SECRET_KEY,
        ]
    },
}

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_CONFIG_URI,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "DECODE_RESPONSES": True
        }
    },
}

RQ_QUEUES = {
    'default': {
        'USE_REDIS_CACHE': 'default',
        'DEFAULT_TIMEOUT': 60
    }
}

CRONJOBS = [
    ('59 23 * * *', 'django.core.management.flush_channels', '>> logs/crontab.log'),
]


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 用户表配置
AUTH_USER_MODEL = 'user.Account'

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")  # python manage.py collectstatic
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "swagger/static"),
    os.path.join(BASE_DIR, "docs"),
)

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

LOG_PATH = os.path.join(BASE_DIR, "logs")
if not os.path.exists(LOG_PATH):
    os.makedirs(LOG_PATH)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d]'
                      ' [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'
        },
        "rq_console": {
                    "format": "%(asctime)s %(message)s",
                    "datefmt": "%H:%M:%S",
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
        'err': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_PATH, 'err.log'),
            'formatter': 'standard',
            'level': 'ERROR'
        },
        'info': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_PATH, 'info.log'),
            'formatter': 'standard',
            'level': 'INFO'
        },
        'debug': {
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'standard',
            'filename': os.path.join(LOG_PATH, 'debug.log'),
            'level': 'DEBUG'
        },
        'rq_console': {
            'level': 'DEBUG',
            'class': 'rq.utils.ColorizingStreamHandler',
            'formatter': 'rq_console',
            'exclude': ['%(asctime)s'],
        }
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'DEBUG',
        },
        'api': {
            'handlers': ['console', 'err', 'info', 'debug'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            'formatter': 'standard',
        },
        'websocket': {
            'handlers': ['console', 'err', 'info', 'debug'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            'formatter': 'standard',
        },
        'rq.worker': {
            'handlers': ['rq_console'],
            'level': 'DEBUG'
        }
    }
}

DOC_DIR = os.path.join(BASE_DIR, 'docs')  # swagger接口文档目录

RETURN_ERR_INFO = True

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    ),
}

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=30),
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'user.auth.jwt_response_payload_handler',
    'JWT_AUTH_COOKIE': False
}

WEBSOCKET_CHANNELS = 'rq_worker_websocket_channels'
